import random

from MinCostFlowProblemGenerator import MinCostFlowProblemGenerator


class WaissiOpponentProblemGenerator(MinCostFlowProblemGenerator):
    def create_network(self, json_path: str, supplier_node_count: int, target_node_count: int):
        initial_data = {
            "nodes": {},
            "arcs": []
        }
        positive_list, negative_list = self.generate_balanced_lists(supplier_node_count, target_node_count)

        # Generate nodes
        for i in range(supplier_node_count):
            initial_data["nodes"][str(i)] = {"demand": negative_list[i]}

        for i in range(target_node_count):
            initial_data["nodes"][str(i + supplier_node_count)] = {"demand": positive_list[i]}

        # Generate Arcs
        # 2 for start and target nodes which will be appended in transformation to maxflow
        n = supplier_node_count + target_node_count + 2
        #
        # Number of arcs to be generated is n-1, because...
        # Total number of arcs will be 2n - 3 = 2*(n/2 - 1) + (n - 1) arcs
        # 2*(n/2 - 1) arcs are generated by the transformation if len(supplier_node_count) = len(target_node_count)
        for i in range(n-1):
            initial_data["arcs"].append(
                {
                    "from": str(random.randint(0, supplier_node_count-1)),
                    "to": str(random.randint(supplier_node_count, supplier_node_count+target_node_count-1)),
                    "cost": random.randint(1, 10),
                    "lower_bound": 0,
                    "upper_bound": random.randint(1, 10)
                }
            )

        self.save_json(json_path, initial_data)

if __name__ == "__main__":
    generator = WaissiOpponentProblemGenerator()
    generator.create_network("../Data/sample_waissi_oppenent.json", 127, 127)